/*
 * Shelter
 * This is an animal shelter server. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: marc@start.up
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Shelter);
  }
}(this, function(expect, Shelter) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Shelter.PetApi();
  });

  describe('(package)', function() {
    describe('PetApi', function() {
      describe('addPet', function() {
        it('should call addPet successfully', function(done) {
          // TODO: uncomment, update parameter values for addPet call
          /*
          var body = new Shelter.Pet();
          body.id = "0";
          body.name = "Rex";
          body.species = "";
          body.breed = "";
          body.photoUrls = [""];
          body.history = [new Shelter.Event()];
          body.history[0].id = "0";
          body.history[0]._date = 0;
          body.history[0].name = "";
          body.history[0].description = "";
          body.status = "available";

          instance.addPet(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePet', function() {
        it('should call deletePet successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePet call
          /*
          var petId = 789;
          var opts = {};
          opts.apiKey = "apiKey_example";

          instance.deletePet(petId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPetById', function() {
        it('should call getPetById successfully', function(done) {
          // TODO: uncomment, update parameter values for getPetById call and complete the assertions
          /*
          var petId = 789;

          instance.getPetById(petId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Shelter.Pet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Rex");
            expect(data.species).to.be.a('string');
            expect(data.species).to.be("");
            expect(data.breed).to.be.a('string');
            expect(data.breed).to.be("");
            {
              let dataCtr = data.photoUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.history;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Shelter.Event);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data._date).to.be.a('number');
                expect(data._date).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("available");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPets', function() {
        it('should call getPets successfully', function(done) {
          // TODO: uncomment getPets call and complete the assertions
          /*

          instance.getPets(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Shelter.Pet);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Rex");
            expect(data.species).to.be.a('string');
            expect(data.species).to.be("");
            expect(data.breed).to.be.a('string');
            expect(data.breed).to.be("");
            {
              let dataCtr = data.photoUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.history;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Shelter.Event);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data._date).to.be.a('number');
                expect(data._date).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
              }
            }
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("available");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePet', function() {
        it('should call updatePet successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePet call
          /*
          var body = new Shelter.Pet();
          body.id = "0";
          body.name = "Rex";
          body.species = "";
          body.breed = "";
          body.photoUrls = [""];
          body.history = [new Shelter.Event()];
          body.history[0].id = "0";
          body.history[0]._date = 0;
          body.history[0].name = "";
          body.history[0].description = "";
          body.status = "available";
          var petId = 789;

          instance.updatePet(body, petId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
